###########################################
#  Ubuntu 22.04 as the base image 
###########################################
FROM ubuntu:22.04


###########################################
#  Build Args
###########################################
ARG GCC_VERSION=13.4.0
ARG LLVM_VERSION=18
ARG NINJA_VERSION=1.12.1
ARG CMAKE_VERSION=3.31.6
ARG QT_VERSION=6.10.0
ARG QTCREATOR_VERSION=18.0.0
ARG FFMPEG_VERSION=n7.1.1
ARG NVIDIA_DRIVER=570.86.10
ARG CUDA_VERSION=12.8.0
ARG CUDNN_VERSION=9.8.0
ARG GO_VERSION=1.25.3


###########################################
#  Labels for metadata and other configs
###########################################
LABEL org.opencontainers.image.authors="ArthurRL"
LABEL org.opencontainers.image.version="1.0.0"
LABEL org.opencontainers.image.description="Development environment with Qt, FFmpeg, CUDA"
LABEL org.opencontainers.image.source="https://github.com/Arthu-RL"
LABEL org.opencontainers.image.licenses="MIT"

# Set non-interactive mode for apt-get installs
ENV DEBIAN_FRONTEND=noninteractive


#######################################
#  Timezone
#######################################
ENV TZ=America/Sao_Paulo
RUN apt-get update && apt-get -y upgrade && \
    apt-get install -y --no-install-recommends tzdata && \
    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone && \
    rm -rf /var/lib/apt/lists/*


#######################################
#  Install Python and psutil
#######################################
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3-dev python3-pip && \
    pip3 install psutil && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

#########################################################
# Base Development & Build Essentials
#########################################################
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Core toolchain
    build-essential \
    ccache \
    # Utilities and download tools
    curl wget unzip git nano \
    # Kernel module support
    dkms \
    # Debuggers
    gdb lldb \
    # Parser generators and docs
    flex bison texinfo \
    # Library configuration helper
    pkg-config \
    # Repository and key management
    gnupg gnupg2 ca-certificates software-properties-common \
    # System info and locale setup
    lsb-release locales xz-utils \

    # Compiler, Math & Low-level Libraries
    # Required to build GCC/Clang
    libgmp-dev libmpfr-dev libmpc-dev \
    # Debug info, XML, compression, FFI
    libffi-dev libdw-dev libxml2 zlib1g-dev \
    # Crypto and keyring libs
    libssl-dev libnghttp2-dev libsecret-1-dev libgcrypt20-dev \
    # SQLite + PostgreSQL C++ bindings
    libsqlite3-dev libpqxx-dev \

    # X11 + Wayland + Input Libraries
    libx11-dev libxext-dev libxrender-dev libxrandr-dev \
    libxi-dev libxkbcommon-dev libxkbcommon-x11-dev \
    libfontconfig1-dev libfreetype6-dev libsm6 libice6 \
    libx11-xcb1 libxrender1 libxext6 libxi6 \
    x11-xserver-utils xorg-dev xterm \
    libxcb1-dev libxcb-glx0-dev libxcb-keysyms1-dev \
    libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev \
    libxcb-sync0-dev libxcb-xfixes0-dev libxcb-shape0-dev \
    libxcb-randr0-dev libxcb-render-util0-dev libxcb-xinerama0-dev \
    libxcb-cursor-dev libxkbcommon-x11-0 \
    libwayland-dev wayland-protocols \

    # Graphics, OpenGL, Vulkan, and GPU Interfaces
    libglvnd-dev libglvnd0 \
    libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev \
    mesa-common-dev mesa-utils \
    libglu1-mesa-dev \
    libvulkan1 vulkan-tools mesa-vulkan-drivers \
    libpci-dev libudev-dev \

    # Audio & Multimedia
    libasound2-dev alsa-base alsa-utils \
    libpulse-dev pulseaudio \
    libopus-dev \
    libx264-dev \

    # Dependencies for Qt Creator
    libedit-dev \
    libzstd-dev \
    libcurl4-openssl-dev \

    # Compression, Math & Networking Utilities
    libjsoncpp-dev libminizip-dev libeigen3-dev libevent-dev \
    libblas-dev liblapack-dev \
    # C++ REST SDK
    # libcpprest-dev \

    # Misc / Useful Tools
    # Editor + assembler
    nano nasm \
    && apt-get clean && rm -rf /var/lib/apt/lists/*


###################################
#  Locale and Language
###################################
RUN locale-gen en_US.UTF-8 && update-locale LANG=en_US.UTF-8

ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8


############################################
#  Global installation ENV
############################################
ENV LIBRARY_PATH="/usr/local"
ENV PATH="${LIBRARY_PATH}/bin:${PATH:-}"


###################################
# C++ configs
###################################
RUN wget -q "https://github.com/gcc-mirror/gcc/archive/refs/tags/releases/gcc-${GCC_VERSION}.tar.gz" -O /tmp/gcc.tar.gz && \
    tar -xzf /tmp/gcc.tar.gz -C /tmp/ && \
    rm -f /tmp/gcc.tar.gz

# Create a separate build directory and compile GCC
RUN mkdir -p /tmp/gcc-build && cd /tmp/gcc-build && \
    /tmp/gcc-releases-gcc-${GCC_VERSION}/configure \
        --prefix="${LIBRARY_PATH}/gcc-${GCC_VERSION}" \
        --enable-languages="c,c++" \
        --disable-multilib && \
    make -j$(nproc) && \
    make install && \
    cd / && \
    rm -rf /tmp/gcc-releases-gcc-${GCC_VERSION} /tmp/gcc-build


###################################
#  Install LLVM and Clang
###################################
RUN wget -q "https://apt.llvm.org/llvm.sh" -O /tmp/llvm.sh && \
    chmod +x /tmp/llvm.sh && \
    /tmp/llvm.sh ${LLVM_VERSION} && \
    rm /tmp/llvm.sh

RUN apt-get install llvm-18-dev libclang-18-dev clang-18 -y --no-install-recommends && \ 
    apt-get clean && rm -rf /var/lib/apt/lists/*


############################################
#  Installing Ninja (newer version)
############################################
RUN wget -q "https://github.com/ninja-build/ninja/releases/download/v${NINJA_VERSION}/ninja-linux.zip" -O /tmp/ninja-linux.zip && \
    unzip /tmp/ninja-linux.zip -d /tmp/ && \
    rm -rf /tmp/ninja-linux.zip

RUN mv /tmp/ninja ${LIBRARY_PATH}/bin


############################################
#  Installing CMake (newer version)
############################################
RUN wget "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz" -O /tmp/cmake-${CMAKE_VERSION}.tar.gz && \
    tar -xzvf /tmp/cmake-${CMAKE_VERSION}.tar.gz -C /tmp/ && \
    rm -rf /tmp/cmake-${CMAKE_VERSION}.tar.gz

RUN mkdir /tmp/cmake-${CMAKE_VERSION}/build && \
    cd /tmp/cmake-${CMAKE_VERSION}/build && \
    ../bootstrap && \
    make -j$(nproc) && \
    make install && \
    cd / && \
    rm -rf /tmp/cmake-${CMAKE_VERSION}


############################################
#  Installing FFmpeg (newer version)
############################################
RUN wget https://github.com/FFmpeg/FFmpeg/archive/refs/tags/${FFMPEG_VERSION}.tar.gz -O /tmp/FFmpeg-${FFMPEG_VERSION}.tar.gz && \
    tar -xzf /tmp/FFmpeg-${FFMPEG_VERSION}.tar.gz -C /tmp/ && \
    cd /tmp/FFmpeg-${FFMPEG_VERSION} && \
    ./configure --prefix=/usr --enable-shared --enable-gpl --enable-libx264 && \
    make -j$(nproc) && \
    make install && \
    # Update library links
    ldconfig && \
    cd / && \
    rm -rf /tmp/FFmpeg-${FFMPEG_VERSION} /tmp/FFmpeg-${FFMPEG_VERSION}.tar.gz


############################################
#  Installing GO
############################################
RUN wget -q "https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz" -O /tmp/go.tar.gz && \
    rm -rf /usr/local/go && \
    tar -C /usr/local -xzf /tmp/go.tar.gz && \
    rm /tmp/go.tar.gz
ENV PATH="/usr/local/go/bin:${PATH:-}"


###################################
# Building Qt
###################################
ENV LLVM_INSTALL_DIR="/usr/lib/llvm-${LLVM_VERSION}"
ENV CMAKE_PREFIX_PATH="${LLVM_INSTALL_DIR}"

ENV QT_DIR="/opt/Qt/${QT_VERSION}"

# Install Qt manually using the specified version
RUN wget "https://download.qt.io/official_releases/qt/${QT_VERSION%.*}/${QT_VERSION}/single/qt-everywhere-src-${QT_VERSION}.tar.xz" -O /tmp/qt-everywhere-src-${QT_VERSION}.tar.xz && \
    tar -xJf /tmp/qt-everywhere-src-${QT_VERSION}.tar.xz -C /tmp/ && \
    rm -rf /tmp/qt-everywhere-src-${QT_VERSION}.tar.xz

RUN mkdir -p /tmp/qt-everywhere-src-${QT_VERSION}/build && \
    cd /tmp/qt-everywhere-src-${QT_VERSION}/build && \
    /tmp/qt-everywhere-src-${QT_VERSION}/configure -prefix ${QT_DIR} -release -opensource -confirm-license -nomake tests -nomake examples -skip qtopcua -skip qtwebengine && \
    cmake --build . --parallel $(nproc) && \
    cmake --install . && \
    cd / && \
    rm -rf /tmp/qt-everywhere-src-${QT_VERSION}


###################################
# Building QtCreator
###################################
ENV CC="gcc"
ENV CXX="g++"
# Set GCC-14.2 as default compiler
RUN update-alternatives --install /usr/bin/gcc gcc ${LIBRARY_PATH}/gcc-${GCC_VERSION}/bin/gcc 100 && \
    update-alternatives --install /usr/bin/g++ g++ ${LIBRARY_PATH}/gcc-${GCC_VERSION}/bin/g++ 100 && \
    update-alternatives --set gcc ${LIBRARY_PATH}/gcc-${GCC_VERSION}/bin/gcc && \
    update-alternatives --set g++ ${LIBRARY_PATH}/gcc-${GCC_VERSION}/bin/g++ 

ENV CMAKE_PREFIX_PATH="${QT_DIR}/gcc_64:${QT_DIR}/lib:${QT_DIR}/lib/cmake:${QT_DIR}/lib/cmake/Qt6:${CMAKE_PREFIX_PATH}"

# Download Qt Creator source and build using CMake and Ninja
ENV QTCREATOR="/opt/QtCreator"

RUN wget "https://download.qt.io/official_releases/qtcreator/${QTCREATOR_VERSION%.*}/${QTCREATOR_VERSION}/qt-creator-opensource-src-${QTCREATOR_VERSION}.tar.xz" -O /tmp/qt-creator-opensource-src-${QTCREATOR_VERSION}.tar.xz && \
    tar -xJf /tmp/qt-creator-opensource-src-${QTCREATOR_VERSION}.tar.xz -C /tmp/ && \
    rm -rf /tmp/qt-creator-opensource-src-${QTCREATOR_VERSION}.tar.xz

RUN cmake -S /tmp/qt-creator-opensource-src-${QTCREATOR_VERSION} -B /tmp/qt-creator-opensource-src-${QTCREATOR_VERSION}/build -DCMAKE_INSTALL_PREFIX=${QTCREATOR} \
        -DCMAKE_INSTALL_PREFIX=${QTCREATOR} -DCMAKE_BUILD_TYPE=Release -G Ninja \
        -DCMAKE_PREFIX_PATH="${CMAKE_PREFIX_PATH}" && \
    cmake --build /tmp/qt-creator-opensource-src-${QTCREATOR_VERSION}/build --parallel $(nproc) --verbose --target install && \
    rm -rf /tmp/qt-creator-opensource-src-${QTCREATOR_VERSION}


##################################################
#  CUDA & CUDNN drivers and toolkit installation
##################################################
ENV CUDA_SHORT=${CUDA_VERSION%.*}
ENV CUDA_SHORT_HYPHEN=${CUDA_SHORT//./-}
RUN wget "https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin" && \
    mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600 && \
    wget "https://developer.download.nvidia.com/compute/cuda/${CUDA_VERSION}/local_installers/cuda-repo-ubuntu2204-${CUDA_SHORT_HYPHEN}-local_${CUDA_VERSION}-${NVIDIA_DRIVER}-1_amd64.deb"
RUN dpkg -i cuda-repo-ubuntu2204-${CUDA_SHORT_HYPHEN}-local_${CUDA_VERSION}-${NVIDIA_DRIVER}-1_amd64.deb && \
    cp /var/cuda-repo-ubuntu2204-${CUDA_SHORT_HYPHEN}-local/cuda-*-keyring.gpg /usr/share/keyrings/ && \
    apt-get update && \
    apt-get install -y --no-install-recommends cuda-toolkit-${CUDA_SHORT} cuda-drivers && \
    rm -f cuda-repo-ubuntu2204-${CUDA_SHORT_HYPHEN}-local_${CUDA_VERSION}-${NVIDIA_DRIVER}-1_amd64.deb && \
    rm -f /etc/apt/sources.list.d/cuda-ubuntu2204-${CUDA_SHORT_HYPHEN}-local.list && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /var/cuda-repo-ubuntu2204-${CUDA_SHORT_HYPHEN}-local

# cuDNN installation
RUN wget -q "https://developer.download.nvidia.com/compute/cudnn/${CUDNN_VERSION}/local_installers/cudnn-local-repo-ubuntu2204-${CUDNN_VERSION}_1.0-1_amd64.deb" && \
    dpkg -i cudnn-local-repo-ubuntu2204-${CUDNN_VERSION}_1.0-1_amd64.deb && \
    cp /var/cudnn-local-repo-ubuntu2204-${CUDNN_VERSION}/cudnn-*-keyring.gpg /usr/share/keyrings/ && \
    apt-get update && \
    apt-get install -y --no-install-recommends cudnn cudnn-cuda-12 && \
    rm -f cudnn-local-repo-ubuntu2204-${CUDNN_VERSION}_1.0-1_amd64.deb && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /var/cudnn-local-repo-ubuntu2204-${CUDNN_VERSION}


###################################
# Important environment variables
###################################
ENV GCC_VERSION=${GCC_VERSION} \
    LLVM_VERSION=${LLVM_VERSION} \
    QT_VERSION=${QT_VERSION} \
    QT_DIR=/opt/Qt/${QT_VERSION} \
    QTCREATOR_DIR=/opt/QtCreator \
    LLVM_INSTALL_DIR=/usr/lib/llvm-${LLVM_VERSION} \
    LIBRARY_PATH=/usr/local \
    # PATH configuration
    PATH="${LIBRARY_PATH}/bin:${LIBRARY_PATH}/cuda:${LIBRARY_PATH}:${LIBRARY_PATH}/include:${QTCREATOR}/bin:${QT_DIR}/gcc_64/bin:${LLVM_INSTALL_DIR}/bin:${PATH}" \
    # Library paths
    LD_LIBRARY_PATH="${LIBRARY_PATH}/cuda/lib64:${QTCREATOR}/lib:${QT_DIR}/gcc_64/lib:${QT_DIR}/lib:${LLVM_INSTALL_DIR}/lib:${LIBRARY_PATH}/gcc-${GCC_VERSION}/lib64:${LD_LIBRARY_PATH:-}" \
    # Qt specific
    QT_QPA_PLATFORM_PLUGIN_PATH="${QT_DIR}/gcc_64/plugins/platforms" \
    QT_PLUGIN_PATH="${QT_DIR}/plugins" \
    PKG_CONFIG_PATH="${QT_DIR}/gcc_64/lib/pkgconfig:${QT_DIR}/lib/pkgconfig:/usr/local/ffmpeg/lib/pkgconfig:${PKG_CONFIG_PATH:-}" \
    CMAKE_PREFIX_PATH="${QT_DIR}:${LLVM_INSTALL_DIR}" \
    # CUDA paths
    CUDA_HOME=${LIBRARY_PATH}/cuda \
    CUDA_PATH=${LIBRARY_PATH}/cuda